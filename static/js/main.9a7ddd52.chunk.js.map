{"version":3,"sources":["common/const.ts","common/events.ts","graphql/queries.ts","common/graphql.ts","components/GqlNotice.tsx","common/settings.ts","hooks/useSettings.ts","hooks/useThemeMode.ts","hooks/useLoginStatus.ts","components/PrivateRoute.tsx","components/shell/Header/Nav.tsx","components/shell/Header/Header.tsx","hooks/useUserInfo.ts","components/shell/TabBar/TabBar.tsx","common/encrypt.ts","common/utils.ts","components/user/LoginForm.tsx","pages/user/Login.tsx","graphql/mutations.ts","components/user/SignUpForm.tsx","pages/user/SignUp.tsx","utils/const.ts","pages/words/Memorize/HiddenText.tsx","pages/words/Memorize/WordCard.tsx","pages/words/Memorize/WordCardList.tsx","pages/words/Memorize/Memorize.tsx","pages/words/MyWords/WordInputDialog.tsx","pages/words/MyWords/MyWords.tsx","Routes.tsx","theme/dark.ts","theme/light.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["STORAGE_KEY_AUTH_TOKEN","STORAGE_SETTINGS","EE","EventEmitter","ENCRYPT_TOKEN","gql","REFRESH_TOKEN","USER_LOGIN","NEW_WORDS","USER_WORDS","USER","client","ApolloClient","uri","process","cache","InMemoryCache","asyncAuthLink","setContext","a","tokensStr","localStorage","getItem","tokens","JSON","parse","accessToken","refreshToken","error","console","log","now","Math","floor","Date","decodedAccessToken","jwtDecode","decodedRefreshToken","exp","query","variables","input","res","setItem","stringify","data","c","headers","authorization","globalErrorCatch","onError","graphQLErrors","networkError","forward","operation","emit","variant","tipsMessage","find","v","extensions","code","message","authorizedClient","link","from","HttpLink","GqlNotice","enqueueSnackbar","useSnackbar","handleShowSnackbar","useCallback","option","useLayoutEffect","addListener","removeListener","defaultSettings","theme","Settings","_settings","_EE","_changeEventName","loadSettings","settingsStr","parsedSettings","_","isEqual","cloneDeep","this","window","addEventListener","key","defaultValue","get","value","set","cb","on","removeAllListeners","instance","useThemeMode","settings","settingsInstanceRef","useRef","getInstance","useState","current","getAll","allSettings","setAllSettings","handleSettingsChange","settingsInstance","setSetting","useSettings","isSystemDark","useMedia","getThemeMode","themeMode","setThemeMode","mode","checkIsLogin","PrivateRoute","children","rest","isLogin","setIsLogin","onStorageChange","loginStatus","removeEventListener","useLoginStatus","render","location","to","pathname","state","useStyles","makeStyles","list","width","large","spacing","height","marginTop","marginBottom","user","padding","backgroundColor","palette","primary","main","Nav","props","path","classes","history","useHistory","toggle","restProps","SwipeableDrawer","className","Avatar","alt","src","avatar","displayName","Typography","email","List","ListItem","button","onClick","e","push","ListItemIcon","ListItemText","createStyles","menuButton","marginRight","title","flexGrow","TopAppBar","useToggle","navOpen","toggleNavOpen","useQuery","loading","AppBar","position","Toolbar","IconButton","edge","color","aria-label","Button","href","open","onOpen","onClose","SimpleBottomNavigation","React","setValue","useLocation","useEffect","BottomNavigation","onChange","event","newValue","showLabels","BottomNavigationAction","label","icon","Encrypt","_JSEncrypt","rsaEncrypt","publicKey","setPublicKey","encrypt","JSEncrypt","storeAuthToken","token","thirdPartLogin","type","replace","encodeURIComponent","origin","root","margin","textAlign","formItemRoot","buttonFullWidth","dividerRoot","LoginSchema","yup","shape","account","required","max","password","LoginForm","useForm","resolver","yupResolver","handleSubmit","control","errors","useLazyQuery","userLogin","show","loginMessage","setLoginMessage","accessTokenParam","useSearchParam","refreshTokenParam","onSubmit","fetchPolicy","tokenRes","encryptToken","text","encryptedPassword","Paper","as","TextField","name","fullWidth","rules","helperText","disableElevation","disabled","Divider","Snackbar","autoHideDuration","anchorOrigin","vertical","horizontal","Alert","severity","Login","Helmet","ADD_NEW_WORD","ADD_USER","UPDATE_NEW_WORD","SignUpSchema","username","phone","SignUpForm","useMutation","addUser","signUpMessage","setSignUpMessage","values","then","catch","SignUp","DND_WORD_CARD","REACT_APP_GRAPHQL_WS_URI","HiddenText","visible","toggleVisible","card","overflow","WordCard","node","useDrag","item","id","collect","monitor","initialOffset","getInitialClientOffset","currentOffset","getClientOffset","dragItem","isDragCurrentItem","isDragging","offset","x","y","end","offsetX","onSlideRight","onSlideLeft","drag","ref","style","transform","Card","CardHeader","word","CardContent","example","translation","CardWrapper","styled","div","min","index","Container","WordCardList","map","reverse","display","flexDirection","alignContent","justifyContent","flex","content","noWords","action","Memorize","listCursor","setListCursor","first","newWordsData","newWordsLoading","newWordsFetchMore","fetchMore","newWordsRefetch","refetch","updateNewWord","handleWord","newWord","allNewWords","edges","forgottenTimes","rememberTimes","result","updateUserWord","success","pageInfo","hasNextPage","params","after","endCursor","updateQuery","previousResult","fetchMoreResult","newEdges","totalCount","newWords","__typename","length","handleRefetch","undefined","elevation","slice","Fab","renderContent","appBar","marginLeft","backdrop","zIndex","drawer","WordInputDialog","onManualClose","addNewWord","setLoading","handleSave","addUserWord","Dialog","noValidate","autoComplete","autoFocus","placeholder","maxLength","multiline","rows","Backdrop","CircularProgress","Transition","forwardRef","Slide","direction","background","paper","paddingBottom","actions","bottom","right","MyWords","inputOpen","setInputOpen","handleCloseInputDialog","allUserWords","ExpansionPanel","ExpansionPanelSummary","expandIcon","aria-controls","Checkbox","tabIndex","disableRipple","stopPropagation","ExpansionPanelDetails","fullScreen","TransitionComponent","FlexContent","Routes","exact","component","materialDarkTheme","createMuiTheme","secondary","light","dark","contrastText","default","materialLightTheme","App","DndProvider","backend","Backend","ThemeProvider","CssBaseline","Boolean","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9a7ddd52.chunk.js","sourcesContent":["export const STORAGE_KEY_AUTH_TOKEN = \"AUTH_TOKEN\";\nexport const STORAGE_SETTINGS = \"STORAGE_SETTINGS\";\n","import EventEmitter from \"eventemitter3\";\n\nexport const EE = new EventEmitter();\n","import { gql } from \"@apollo/client\";\n\nexport const ENCRYPT_TOKEN = gql`\n  query EncryptToken {\n    encryptToken {\n      token\n      publicKey\n    }\n  }\n`;\n\nexport const REFRESH_TOKEN = gql`\n  query RefreshToken($input: RefreshTokenInput!) {\n    refreshToken(input: $input) {\n      accessToken\n      refreshToken\n    }\n  }\n`;\n\nexport const USER_LOGIN = gql`\n  query UserLogin($input: UserLoginInput!) {\n    userLogin(input: $input) {\n      accessToken\n      refreshToken\n    }\n  }\n`;\n\nexport const NEW_WORDS = gql`\n  query NewWords($first: Int!, $after: String) {\n    allNewWords(first: $first, after: $after) {\n      edges {\n        node {\n          id\n          word\n          translation\n          example\n          forgottenTimes\n          rememberTimes\n        }\n        cursor\n      }\n      pageInfo {\n        hasNextPage\n        endCursor\n      }\n      totalCount\n    }\n  }\n`;\n\nexport const USER_WORDS = gql`\n  query UserWords($first: Int!, $after: String) {\n    allUserWords(first: $first, after: $after) {\n      edges {\n        node {\n          id\n          word\n          translation\n          example\n          forgottenTimes\n          rememberTimes\n        }\n        cursor\n      }\n      pageInfo {\n        hasNextPage\n        endCursor\n      }\n      totalCount\n    }\n  }\n`;\n\nexport const USER = gql`\n  query User {\n    user {\n      displayName\n      id\n      email\n      avatar\n    }\n  }\n`;\n","import { ApolloClient, from, HttpLink, InMemoryCache } from \"@apollo/client\";\nimport { setContext } from \"@apollo/client/link/context\";\nimport { onError } from \"@apollo/client/link/error\";\nimport jwtDecode from \"jwt-decode\";\n\nimport { STORAGE_KEY_AUTH_TOKEN } from \"./const\";\nimport { EE } from \"./events\";\n\nimport {\n  RefreshToken,\n  RefreshTokenVariables,\n} from \"../graphql/__generated__/RefreshToken\";\nimport { REFRESH_TOKEN } from \"../graphql/queries\";\nimport { IJwtTokenObj, IAuthToken } from \"../types\";\n\nexport const client = new ApolloClient({\n  uri: process.env.REACT_APP_GRAPHQL_HTTP_URI,\n  cache: new InMemoryCache(),\n});\n\nconst asyncAuthLink = setContext(async () => {\n  const tokensStr = localStorage.getItem(STORAGE_KEY_AUTH_TOKEN);\n\n  let accessToken: string | undefined;\n  let refreshToken: string | undefined;\n\n  if (tokensStr) {\n    try {\n      const tokens: IAuthToken = JSON.parse(tokensStr);\n      accessToken = tokens.accessToken;\n      refreshToken = tokens.refreshToken;\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  if (accessToken && refreshToken) {\n    const now = Math.floor(Date.now() / 1000);\n    const decodedAccessToken = jwtDecode<IJwtTokenObj>(accessToken);\n    const decodedRefreshToken = jwtDecode<IJwtTokenObj>(refreshToken);\n\n    if (decodedAccessToken.exp < now && decodedRefreshToken.exp > now) {\n      const res = await client.query<RefreshToken, RefreshTokenVariables>({\n        query: REFRESH_TOKEN,\n        variables: {\n          input: {\n            accessToken,\n            refreshToken,\n          },\n        },\n      });\n      localStorage.setItem(\n        STORAGE_KEY_AUTH_TOKEN,\n        JSON.stringify(res.data.refreshToken)\n      );\n    }\n  }\n  let c = {\n    headers: {\n      authorization: accessToken ? `Bearer ${accessToken}` : \"\",\n    },\n  };\n  return c;\n});\n\nconst globalErrorCatch = onError(\n  ({ graphQLErrors, networkError, forward, operation }) => {\n    if (networkError) {\n      EE.emit(\"notistack\", \"网络有问题，请稍后再试。\", {\n        variant: \"error\",\n      });\n    } else if (graphQLErrors) {\n      const tipsMessage = graphQLErrors.find(\n        (v) => v.extensions?.code === \"TIPS_ERROR\"\n      );\n      if (tipsMessage) {\n        EE.emit(\"notistack\", tipsMessage.message, {\n          variant: \"error\",\n        });\n      }\n    } else {\n      EE.emit(\"notistack\", \"服务器出了点问题，请稍后再试。\", {\n        variant: \"error\",\n      });\n    }\n    return forward(operation);\n  }\n);\nexport const authorizedClient = new ApolloClient({\n  link: from([\n    asyncAuthLink,\n    globalErrorCatch,\n    new HttpLink({ uri: process.env.REACT_APP_GRAPHQL_HTTP_URI }),\n  ]),\n  cache: new InMemoryCache(),\n});\n","import React, { useLayoutEffect, useCallback } from \"react\";\n\nimport { useSnackbar } from \"notistack\";\n\nimport { EE } from \"../common/events\";\n\nconst GqlNotice: React.FC = () => {\n  const { enqueueSnackbar } = useSnackbar();\n\n  const handleShowSnackbar = useCallback(\n    (message: string, option: any) => {\n      enqueueSnackbar(message, option);\n    },\n    [enqueueSnackbar]\n  );\n\n  useLayoutEffect(() => {\n    EE.addListener(\"notistack\", handleShowSnackbar);\n    return () => {\n      EE.removeListener(\"notistack\", handleShowSnackbar);\n    };\n  }, [handleShowSnackbar]);\n\n  return <div></div>;\n};\n\nexport default GqlNotice;\n","import _ from \"lodash\";\nimport EventEmitter from \"eventemitter3\";\nimport { STORAGE_SETTINGS } from \"./const\";\n\nexport type IConfigCallback = (v: ISettingsConfig) => void;\n\nexport type ISettingsConfig = {\n  theme: \"light\" | \"dark\" | \"auto\";\n};\n\nexport const defaultSettings: ISettingsConfig = {\n  theme: \"auto\",\n};\n\n/**\n * Settings 仅允许有一个实例\n */\nexport class Settings {\n  private static instance: Settings;\n\n  private _settings: ISettingsConfig = defaultSettings;\n  private _EE: EventEmitter;\n  private readonly _changeEventName = \"settingsChange\";\n\n  private constructor() {\n    this._EE = new EventEmitter();\n    this.loadSettings();\n    window.addEventListener(\"storage\", this.loadSettings);\n  }\n\n  public static getInstance() {\n    if (!Settings.instance) {\n      Settings.instance = new Settings();\n    }\n\n    return Settings.instance;\n  }\n\n  loadSettings = () => {\n    const settingsStr = localStorage.getItem(STORAGE_SETTINGS) || \"\";\n    try {\n      const parsedSettings = JSON.parse(settingsStr);\n      if (_.isEqual(this._settings, parsedSettings)) {\n        return settingsStr;\n      }\n      this._settings = parsedSettings;\n    } catch (error) {\n      this._settings = defaultSettings;\n    }\n    this._EE.emit(this._changeEventName, _.cloneDeep(this._settings));\n    return settingsStr;\n  };\n\n  get<K extends keyof ISettingsConfig>(\n    key: K,\n    defaultValue: ISettingsConfig[K]\n  ): ISettingsConfig[K] {\n    return _.get(this._settings, key, defaultValue);\n  }\n\n  set<K extends keyof ISettingsConfig>(key: K, value: ISettingsConfig[K]) {\n    _.set(this._settings, key, value);\n    const settingsStr = JSON.stringify(this._settings);\n    localStorage.setItem(STORAGE_SETTINGS, settingsStr);\n    this._EE.emit(this._changeEventName, _.cloneDeep(this._settings));\n  }\n\n  getAll(): ISettingsConfig {\n    return _.cloneDeep(this._settings);\n  }\n\n  addListener(cb: IConfigCallback) {\n    this._EE.on(this._changeEventName, cb);\n  }\n\n  removeListener(cb: IConfigCallback) {\n    this._EE.removeListener(this._changeEventName, cb);\n  }\n\n  removeAllListener() {\n    this._EE.removeAllListeners();\n  }\n}\n","import { useLayoutEffect, useRef, useState } from \"react\";\n\nimport { IConfigCallback, ISettingsConfig, Settings } from \"../common/settings\";\n\nexport const useSettings = () => {\n  const settingsInstanceRef = useRef<Settings>(Settings.getInstance());\n\n  const [allSettings, setAllSettings] = useState<ISettingsConfig | undefined>(\n    settingsInstanceRef.current?.getAll()\n  );\n\n  const handleSettingsChange: IConfigCallback = (data) => {\n    setAllSettings(data);\n  };\n\n  function setSetting<K extends keyof ISettingsConfig>(\n    key: K,\n    value: ISettingsConfig[K]\n  ) {\n    settingsInstanceRef.current?.set(key, value);\n  }\n\n  useLayoutEffect(() => {\n    const settingsInstance = settingsInstanceRef.current;\n    settingsInstance.addListener(handleSettingsChange);\n\n    return () => settingsInstance.removeListener(handleSettingsChange);\n  }, []);\n\n  return { settings: allSettings, setSetting };\n};\n","import { useCallback, useLayoutEffect, useState } from \"react\";\nimport { useMedia } from \"react-use\";\n\nimport { useSettings } from \"./useSettings\";\n\ntype IThemeMode = \"dark\" | \"light\";\n\nexport const useThemeMode = () => {\n  const { settings } = useSettings();\n\n  const isSystemDark = useMedia(\"(prefers-color-scheme: dark)\");\n\n  const getThemeMode = useCallback(() => {\n    if (settings?.theme === \"auto\") {\n      if (isSystemDark) {\n        return \"dark\";\n      } else {\n        return \"light\";\n      }\n    } else {\n      return settings?.theme;\n    }\n  }, [settings, isSystemDark]);\n\n  const [themeMode, setThemeMode] = useState<IThemeMode | undefined>(\n    getThemeMode()\n  );\n\n  useLayoutEffect(() => {\n    const mode = getThemeMode();\n    setThemeMode(mode);\n  }, [getThemeMode, isSystemDark, settings]);\n\n  return themeMode;\n};\n","import { useLayoutEffect, useState } from \"react\";\n\nimport { STORAGE_KEY_AUTH_TOKEN } from \"../common/const\";\n\nconst checkIsLogin = () => {\n  const tokensStr = localStorage.getItem(STORAGE_KEY_AUTH_TOKEN);\n  if (!tokensStr) return false;\n  try {\n    const tokens = JSON.parse(tokensStr);\n    return tokens.accessToken && tokens.refreshToken;\n  } catch (error) {}\n  return false;\n};\n\nexport const useLoginStatus = () => {\n  const [isLogin, setIsLogin] = useState<boolean>(checkIsLogin());\n\n  const onStorageChange = () => {\n    const loginStatus = checkIsLogin();\n    setIsLogin(loginStatus);\n  };\n\n  useLayoutEffect(() => {\n    window.addEventListener(\"storage\", onStorageChange);\n    return () => {\n      window.removeEventListener(\"storage\", onStorageChange);\n    };\n  }, []);\n\n  return isLogin;\n};\n","import React from \"react\";\nimport { Route, Redirect, RouteProps } from \"react-router-dom\";\nimport { useLoginStatus } from \"../hooks/useLoginStatus\";\n\nconst PrivateRoute: React.FC<RouteProps> = ({ children, ...rest }) => {\n  const isLogin = useLoginStatus();\n  console.log(\"isLogin\", isLogin);\n  return (\n    <Route\n      {...rest}\n      render={({ location }) =>\n        isLogin ? (\n          children\n        ) : (\n          <Redirect\n            to={{\n              pathname: \"/user/login\",\n              state: { from: location },\n            }}\n          />\n        )\n      }\n    />\n  );\n};\n\nexport default PrivateRoute;\n","import Avatar from \"@material-ui/core/Avatar\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport SwipeableDrawer, {\n  SwipeableDrawerProps,\n} from \"@material-ui/core/SwipeableDrawer\";\nimport Typography from \"@material-ui/core/Typography\";\nimport GTranslateIcon from \"@material-ui/icons/GTranslate\";\nimport React from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { User } from \"../../../graphql/__generated__/User\";\n\nconst useStyles = makeStyles((theme) => ({\n  list: {\n    width: 250,\n  },\n  large: {\n    width: theme.spacing(8),\n    height: theme.spacing(8),\n    marginTop: theme.spacing(1),\n    marginBottom: theme.spacing(1),\n  },\n  user: {\n    padding: theme.spacing(2),\n    backgroundColor: theme.palette.primary.main,\n  },\n}));\n\nexport interface INavProps extends SwipeableDrawerProps {\n  toggle: () => void;\n  user?: User;\n}\n\nconst Nav: React.FC<INavProps> = (props) => {\n  const classes = useStyles();\n  let history = useHistory();\n\n  const handleClick = (path?: string) => (e: React.MouseEvent) => {\n    if (path) {\n      history.push(path);\n    }\n    props.toggle();\n  };\n\n  const { toggle, user, ...restProps } = props;\n\n  return (\n    <SwipeableDrawer {...restProps}>\n      <div className={classes.list}>\n        <div className={classes.user}>\n          <Avatar\n            alt=\"avatar\"\n            src={user?.user?.avatar || \"\"}\n            className={classes.large}\n          >\n            {user?.user?.displayName?.[0]}\n          </Avatar>\n          <Typography variant=\"body1\">{user?.user?.displayName}</Typography>\n          <Typography variant=\"body2\">{user?.user?.email}</Typography>\n        </div>\n        <List>\n          <ListItem button onClick={handleClick(\"/words\")}>\n            <ListItemIcon>\n              <GTranslateIcon />\n            </ListItemIcon>\n            <ListItemText>记单词</ListItemText>\n          </ListItem>\n        </List>\n      </div>\n    </SwipeableDrawer>\n  );\n};\n\nexport default Nav;\n","import { Avatar } from \"@material-ui/core\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Button from \"@material-ui/core/Button\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport { createStyles, makeStyles, Theme } from \"@material-ui/core/styles\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Typography from \"@material-ui/core/Typography\";\nimport HourglassEmptyIcon from \"@material-ui/icons/HourglassEmpty\";\nimport MenuIcon from \"@material-ui/icons/Menu\";\nimport React from \"react\";\nimport { useToggle } from \"react-use\";\n\nimport { useUserInfo } from \"../../../hooks/useUserInfo\";\nimport Nav from \"./Nav\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    menuButton: {\n      marginRight: theme.spacing(2),\n    },\n    title: {\n      flexGrow: 1,\n    },\n  })\n);\n\nexport default function TopAppBar() {\n  const classes = useStyles();\n  const [navOpen, toggleNavOpen] = useToggle(false);\n  const { loading, data } = useUserInfo();\n\n  return (\n    <>\n      <AppBar position=\"static\">\n        <Toolbar>\n          <IconButton\n            edge=\"start\"\n            className={classes.menuButton}\n            color=\"inherit\"\n            aria-label=\"menu\"\n            onClick={toggleNavOpen}\n          >\n            {loading ? <HourglassEmptyIcon /> : <MenuIcon />}\n          </IconButton>\n          <Typography variant=\"h6\" className={classes.title}>\n            Awesome\n          </Typography>\n          {data?.user ? (\n            <Avatar src={data.user.avatar || \"\"}>\n              {data.user.displayName[0]}\n            </Avatar>\n          ) : (\n            <Button color=\"inherit\" href=\"/user/login\">\n              Login\n            </Button>\n          )}\n        </Toolbar>\n      </AppBar>\n      <Nav\n        user={data}\n        open={navOpen}\n        toggle={toggleNavOpen}\n        onOpen={toggleNavOpen}\n        onClose={toggleNavOpen}\n      />\n    </>\n  );\n}\n","import { USER } from \"../graphql/queries\";\nimport { User } from \"../graphql/__generated__/User\";\nimport { useQuery } from \"@apollo/client\";\n\nexport const useUserInfo = () => {\n  return useQuery<User>(USER);\n};\n","import BottomNavigation from \"@material-ui/core/BottomNavigation\";\nimport BottomNavigationAction from \"@material-ui/core/BottomNavigationAction\";\nimport FavoriteIcon from \"@material-ui/icons/Favorite\";\n// import LocationOnIcon from \"@material-ui/icons/LocationOn\";\nimport RestoreIcon from \"@material-ui/icons/Restore\";\nimport React from \"react\";\nimport { useHistory, useLocation } from \"react-router-dom\";\n\nexport default function SimpleBottomNavigation() {\n  const [value, setValue] = React.useState(\"\");\n  const location = useLocation();\n  const history = useHistory();\n\n  React.useEffect(() => {\n    setValue(location.pathname);\n  }, [location]);\n\n  return (\n    <BottomNavigation\n      value={value}\n      onChange={(event, newValue) => {\n        setValue(newValue);\n        history.push(newValue);\n      }}\n      showLabels\n    >\n      <BottomNavigationAction\n        value=\"/words/memorize\"\n        label=\"记单词\"\n        icon={<RestoreIcon />}\n      />\n      <BottomNavigationAction\n        value=\"/words/my-words\"\n        label=\"我的单词\"\n        icon={<FavoriteIcon />}\n      />\n      {/* <BottomNavigationAction\n        value=\"/words/statistics\"\n        label=\"统计\"\n        icon={<LocationOnIcon />}\n      /> */}\n    </BottomNavigation>\n  );\n}\n","import { JSEncrypt } from \"jsencrypt\";\n\nexport class Encrypt {\n  private static instance: Encrypt;\n\n  public static getInstance() {\n    if (!Encrypt.instance) {\n      Encrypt.instance = new Encrypt();\n    }\n    return Encrypt.instance;\n  }\n\n  private _JSEncrypt: JSEncrypt;\n\n  constructor() {\n    this._JSEncrypt = new JSEncrypt();\n  }\n\n  rsaEncrypt = async (publicKey: string, data: string) => {\n    this._JSEncrypt.setPublicKey(publicKey);\n    return this._JSEncrypt.encrypt(data);\n  };\n}\n","import { IAuthToken } from \"../types\";\nimport { STORAGE_KEY_AUTH_TOKEN } from \"./const\";\n\nexport const urlRegExp = /https?:\\/\\/(www\\.)?[-a-zA-Z0-9@:%._+~#=]{1,256}\\.[a-zA-Z0-9()]{1,6}\\b([-a-zA-Z0-9()@:%_+.~#?&//=]*)/;\n\nexport const storeAuthToken = (token: IAuthToken) => {\n  localStorage.setItem(STORAGE_KEY_AUTH_TOKEN, JSON.stringify(token));\n};\n","import { useLazyQuery } from \"@apollo/client\";\nimport { yupResolver } from \"@hookform/resolvers/yup\";\nimport {\n  Button,\n  Divider,\n  IconButton,\n  Paper,\n  Snackbar,\n  Typography,\n} from \"@material-ui/core\";\nimport { createStyles, makeStyles, Theme } from \"@material-ui/core/styles\";\nimport TextField from \"@material-ui/core/TextField\";\nimport GitHubIcon from \"@material-ui/icons/GitHub\";\nimport Alert from \"@material-ui/lab/Alert\";\nimport React, { useEffect, useState } from \"react\";\nimport { Controller, useForm } from \"react-hook-form\";\nimport { FaWeibo } from \"react-icons/fa\";\nimport { useHistory } from \"react-router-dom\";\nimport { useSearchParam } from \"react-use\";\nimport * as yup from \"yup\";\n\nimport { UserLoginInput } from \"../../../__generated__/globalTypes\";\nimport { Encrypt } from \"../../common/encrypt\";\nimport { client } from \"../../common/graphql\";\nimport { storeAuthToken } from \"../../common/utils\";\nimport { EncryptToken } from \"../../graphql/__generated__/EncryptToken\";\nimport {\n  UserLogin,\n  UserLoginVariables,\n} from \"../../graphql/__generated__/UserLogin\";\nimport { ENCRYPT_TOKEN, USER_LOGIN } from \"../../graphql/queries\";\n\ntype ILoginMessage = {\n  show: boolean;\n  message: string;\n};\n\nconst thirdPartLogin = (type: string) => {\n  window.location.replace(\n    `${\n      process.env.REACT_APP_AUTH_URL\n    }?type=${type}&redirectUrl=${encodeURIComponent(\n      window.location.origin + window.location.pathname\n    )}`\n  );\n};\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      width: 360,\n      margin: \"auto\",\n      textAlign: \"center\",\n      padding: theme.spacing(2),\n    },\n    formItemRoot: {\n      margin: \"12px auto\",\n    },\n    buttonFullWidth: {\n      margin: \"3px auto\",\n    },\n    dividerRoot: {\n      margin: \"12px auto\",\n    },\n  })\n);\n\nconst LoginSchema = yup.object().shape<UserLoginInput>({\n  account: yup.string().required().max(32),\n  password: yup.string().required().max(32),\n});\n\nconst LoginForm = () => {\n  const { handleSubmit, control, errors } = useForm<UserLoginInput>({\n    resolver: yupResolver(LoginSchema),\n  });\n\n  const classes = useStyles();\n\n  const [userLogin, { loading, data }] = useLazyQuery<\n    UserLogin,\n    UserLoginVariables\n  >(USER_LOGIN);\n\n  const [loginMessage, setLoginMessage] = useState<ILoginMessage>({\n    show: false,\n    message: \"\",\n  });\n\n  const history = useHistory();\n  const accessTokenParam = useSearchParam(\"accessToken\");\n  const refreshTokenParam = useSearchParam(\"refreshToken\");\n\n  useEffect(() => {\n    if (data?.userLogin) {\n      storeAuthToken(data.userLogin);\n      history.push(\"/home\");\n    }\n  }, [data, history]);\n\n  useEffect(() => {\n    if (accessTokenParam && refreshTokenParam) {\n      storeAuthToken({\n        accessToken: accessTokenParam,\n        refreshToken: refreshTokenParam,\n      });\n      history.push(\"/home\");\n    }\n  }, [accessTokenParam, refreshTokenParam, history]);\n\n  const onSubmit = async (data: UserLoginInput) => {\n    const tokenRes = await client.query<EncryptToken>({\n      query: ENCRYPT_TOKEN,\n      fetchPolicy: \"network-only\",\n    });\n    if (!tokenRes.data.encryptToken) {\n      return;\n    }\n    const encrypt = Encrypt.getInstance();\n    const encryptedPassword = await encrypt.rsaEncrypt(\n      tokenRes.data.encryptToken.publicKey,\n      JSON.stringify({\n        token: tokenRes.data.encryptToken.token,\n        text: data.password,\n      })\n    );\n    userLogin({\n      variables: {\n        input: {\n          account: data.account,\n          password: encryptedPassword,\n        },\n      },\n    });\n  };\n\n  return (\n    <Paper className={classes.root}>\n      <Typography variant=\"h6\">登录</Typography>\n      <form onSubmit={handleSubmit(onSubmit)}>\n        <Controller\n          as={TextField}\n          name=\"account\"\n          label=\"用户名\"\n          required\n          fullWidth\n          variant=\"outlined\"\n          // @ts-ignore\n          control={control}\n          defaultValue=\"\"\n          rules={{ required: true }}\n          classes={{\n            root: classes.formItemRoot,\n          }}\n          error={!!errors.account}\n          helperText={errors.account?.message}\n        />\n        <Controller\n          as={TextField}\n          name=\"password\"\n          label=\"密码\"\n          required\n          fullWidth\n          variant=\"outlined\"\n          type=\"password\"\n          // @ts-ignore\n          control={control}\n          defaultValue=\"\"\n          rules={{ required: true }}\n          classes={{\n            root: classes.formItemRoot,\n          }}\n          error={!!errors.password}\n          helperText={errors.password?.message}\n        />\n        <Button\n          type=\"submit\"\n          color=\"primary\"\n          variant=\"contained\"\n          disableElevation\n          fullWidth\n          classes={{\n            fullWidth: classes.buttonFullWidth,\n          }}\n          disabled={loading}\n        >\n          登录\n        </Button>\n        <Button\n          variant=\"contained\"\n          disableElevation\n          fullWidth\n          classes={{\n            fullWidth: classes.buttonFullWidth,\n          }}\n          onClick={() => history.push(\"/user/signup\")}\n        >\n          注册\n        </Button>\n      </form>\n      <Divider classes={{ root: classes.dividerRoot }} />\n      <Typography variant=\"subtitle2\">第三方账号登录</Typography>\n      <div>\n        <IconButton onClick={() => thirdPartLogin(\"github\")}>\n          <GitHubIcon />\n        </IconButton>\n        <IconButton onClick={() => thirdPartLogin(\"weibo\")}>\n          <FaWeibo />\n        </IconButton>\n      </div>\n      <Snackbar\n        open={loginMessage.show}\n        onClose={() => setLoginMessage({ show: false, message: \"\" })}\n        autoHideDuration={3000}\n        anchorOrigin={{\n          vertical: \"top\",\n          horizontal: \"center\",\n        }}\n      >\n        <Alert severity=\"error\">{loginMessage.message}</Alert>\n      </Snackbar>\n    </Paper>\n  );\n};\n\nexport default LoginForm;\n","import { createStyles, makeStyles, Theme } from \"@material-ui/core/styles\";\nimport React from \"react\";\nimport { Helmet } from \"react-helmet\";\n\nimport LoginForm from \"../../components/user/LoginForm\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      marginTop: theme.spacing(20),\n    },\n  })\n);\n\nconst Login: React.FC = () => {\n  const classes = useStyles();\n  return (\n    <div className={classes.root}>\n      <Helmet>\n        <title>NO WORDS -- 登录</title>\n      </Helmet>\n      <LoginForm />\n    </div>\n  );\n};\n\nexport default Login;\n","import { gql } from \"@apollo/client\";\n\nexport const ADD_NEW_WORD = gql`\n  mutation AddNewWord($input: AddUserWordInput!) {\n    addUserWord(input: $input) {\n      id\n    }\n  }\n`;\n\nexport const ADD_USER = gql`\n  mutation AddUser($input: AddUserInput!) {\n    addUser(input: $input) {\n      accessToken\n      refreshToken\n    }\n  }\n`;\n\nexport const UPDATE_NEW_WORD = gql`\n  mutation UpdateNewWord($input: UpdateUserWordInput!) {\n    updateUserWord(input: $input) {\n      success\n      message\n    }\n  }\n`;\n","import { useMutation } from \"@apollo/client\";\nimport { yupResolver } from \"@hookform/resolvers/yup\";\nimport {\n  Button,\n  Paper,\n  Snackbar,\n  TextField,\n  Typography,\n} from \"@material-ui/core\";\nimport { createStyles, makeStyles, Theme } from \"@material-ui/core/styles\";\nimport Alert from \"@material-ui/lab/Alert\";\nimport React, { useEffect, useState } from \"react\";\nimport { Controller, useForm } from \"react-hook-form\";\nimport { useHistory } from \"react-router-dom\";\nimport * as yup from \"yup\";\n\nimport { AddUserInput } from \"../../../__generated__/globalTypes\";\nimport { Encrypt } from \"../../common/encrypt\";\nimport { client } from \"../../common/graphql\";\nimport { storeAuthToken } from \"../../common/utils\";\nimport { AddUser, AddUserVariables } from \"../../graphql/__generated__/AddUser\";\nimport { EncryptToken } from \"../../graphql/__generated__/EncryptToken\";\nimport { ADD_USER } from \"../../graphql/mutations\";\nimport { ENCRYPT_TOKEN } from \"../../graphql/queries\";\n\ntype ISignUpMessage = {\n  show: boolean;\n  message: string;\n};\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      width: 360,\n      margin: \"auto\",\n      textAlign: \"center\",\n      padding: theme.spacing(2),\n    },\n    formItemRoot: {\n      margin: \"12px auto\",\n    },\n    buttonFullWidth: {\n      margin: \"3px auto\",\n    },\n    dividerRoot: {\n      margin: \"12px auto\",\n    },\n  })\n);\n\nconst SignUpSchema = yup.object().shape<AddUserInput>({\n  username: yup.string().required().max(32),\n  password: yup.string().required().max(32),\n  displayName: yup.string().required().max(32),\n  email: yup.string().email(),\n  phone: yup.string().max(32),\n});\n\nconst SignUpForm: React.FC = () => {\n  const classes = useStyles();\n  const history = useHistory();\n  const { handleSubmit, control, errors } = useForm<AddUserInput>({\n    resolver: yupResolver(SignUpSchema),\n  });\n  const [addUser, { data, loading }] = useMutation<AddUser, AddUserVariables>(\n    ADD_USER\n  );\n  const [signUpMessage, setSignUpMessage] = useState<ISignUpMessage>({\n    show: false,\n    message: \"\",\n  });\n\n  useEffect(() => {\n    if (data?.addUser) {\n      storeAuthToken(data.addUser);\n    }\n  }, [data]);\n\n  const onSubmit = async (values: AddUserInput) => {\n    const tokenRes = await client.query<EncryptToken>({\n      query: ENCRYPT_TOKEN,\n    });\n    if (!tokenRes.data.encryptToken) {\n      return;\n    }\n    const encrypt = Encrypt.getInstance();\n    const encryptedPassword = await encrypt.rsaEncrypt(\n      tokenRes.data.encryptToken.publicKey,\n      JSON.stringify({\n        token: tokenRes.data.encryptToken.token,\n        text: values.password,\n      })\n    );\n    values.password = encryptedPassword;\n    addUser({\n      variables: {\n        input: values,\n      },\n    })\n      .then((res) => {\n        history.replace(\"/\");\n      })\n      .catch((e) => {\n        console.log(e);\n      });\n  };\n\n  return (\n    <Paper className={classes.root}>\n      <Typography variant=\"h6\">注册</Typography>\n      <form onSubmit={handleSubmit(onSubmit)}>\n        <Controller\n          as={TextField}\n          name=\"username\"\n          label=\"用户名\"\n          required\n          fullWidth\n          variant=\"outlined\"\n          // @ts-ignore\n          control={control}\n          defaultValue=\"\"\n          rules={{ required: true }}\n          classes={{\n            root: classes.formItemRoot,\n          }}\n          error={!!errors.username}\n          helperText={errors.username?.message}\n        />\n        <Controller\n          as={TextField}\n          name=\"displayName\"\n          label=\"昵称\"\n          required\n          fullWidth\n          variant=\"outlined\"\n          // @ts-ignore\n          control={control}\n          defaultValue=\"\"\n          rules={{ required: true }}\n          classes={{\n            root: classes.formItemRoot,\n          }}\n          error={!!errors.displayName}\n          helperText={errors.displayName?.message}\n        />\n        <Controller\n          as={TextField}\n          name=\"password\"\n          label=\"密码\"\n          required\n          fullWidth\n          variant=\"outlined\"\n          type=\"password\"\n          // @ts-ignore\n          control={control}\n          defaultValue=\"\"\n          rules={{ required: true }}\n          classes={{\n            root: classes.formItemRoot,\n          }}\n          error={!!errors.password}\n          helperText={errors.password?.message}\n        />\n        <Controller\n          as={TextField}\n          name=\"email\"\n          label=\"邮箱\"\n          fullWidth\n          variant=\"outlined\"\n          // type=\"email\"\n          // @ts-ignore\n          control={control}\n          defaultValue=\"\"\n          rules={{ required: true }}\n          classes={{\n            root: classes.formItemRoot,\n          }}\n          error={!!errors.email}\n          helperText={errors.email?.message}\n        />\n        <Controller\n          as={TextField}\n          name=\"phone\"\n          label=\"手机号\"\n          fullWidth\n          variant=\"outlined\"\n          control={control}\n          defaultValue=\"\"\n          classes={{\n            root: classes.formItemRoot,\n          }}\n          error={!!errors.phone}\n          helperText={errors.phone?.message}\n        />\n        <Button\n          type=\"submit\"\n          variant=\"contained\"\n          color=\"primary\"\n          disableElevation\n          fullWidth\n          classes={{\n            fullWidth: classes.buttonFullWidth,\n          }}\n          disabled={loading}\n        >\n          注册\n        </Button>\n        <Button\n          type=\"submit\"\n          variant=\"contained\"\n          disableElevation\n          fullWidth\n          classes={{\n            fullWidth: classes.buttonFullWidth,\n          }}\n          onClick={() => history.push(\"/user/login\")}\n        >\n          已有账号？点此登录\n        </Button>\n      </form>\n      <Snackbar\n        open={signUpMessage.show}\n        onClose={() => setSignUpMessage({ show: false, message: \"\" })}\n        autoHideDuration={3000}\n        anchorOrigin={{\n          vertical: \"top\",\n          horizontal: \"center\",\n        }}\n      >\n        <Alert severity=\"error\">{signUpMessage.message}</Alert>\n      </Snackbar>\n    </Paper>\n  );\n};\n\nexport default SignUpForm;\n","import { createStyles, makeStyles, Theme } from \"@material-ui/core/styles\";\nimport React from \"react\";\nimport { Helmet } from \"react-helmet\";\n\nimport SignUpForm from \"../../components/user/SignUpForm\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      marginTop: theme.spacing(20),\n    },\n  })\n);\n\nconst SignUp: React.FC = () => {\n  const classes = useStyles();\n  return (\n    <div className={classes.root}>\n      <Helmet>\n        <title>NO WORDS -- 注册</title>\n      </Helmet>\n      <SignUpForm />\n    </div>\n  );\n};\n\nexport default SignUp;\n","export const AUTH_URL = process.env.REACT_APP_AUTH_URL;\nexport const AUTH_CALLBACK_URL = `${window.location.origin}/user/login`;\nexport const LOGIN_PATH = \"/user/login\";\nexport const GRAPHQL_HTTP_URI = process.env.REACT_APP_GRAPHQL_HTTP_URI;\nexport const GRAPHQL_WS_URI = process.env.REACT_APP_GRAPHQL_WS_URI;\n\nexport const DND_WORD_CARD = {\n  CARD: \"card\",\n};\n\nexport const STORAGE_KEY_AUTH_TOKEN = \"AUTH_TOKEN\";\n","import { createStyles, makeStyles, Theme } from \"@material-ui/core/styles\";\nimport Typography from \"@material-ui/core/Typography\";\nimport VisibilityIcon from \"@material-ui/icons/Visibility\";\nimport VisibilityOffIcon from \"@material-ui/icons/VisibilityOff\";\nimport React from \"react\";\nimport { useToggle } from \"react-use\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    icon: {\n      textAlign: \"center\"\n    }\n  })\n);\n\nconst HiddenText: React.FC = props => {\n  const classes = useStyles();\n  const [visible, toggleVisible] = useToggle(false);\n  return (\n    <>\n      <div className={classes.icon}>\n        {visible ? (\n          <VisibilityOffIcon onClick={toggleVisible} />\n        ) : (\n          <VisibilityIcon onClick={toggleVisible} />\n        )}\n      </div>\n      {visible ? (\n        <Typography variant=\"body2\">{props.children}</Typography>\n      ) : null}\n    </>\n  );\n};\n\nexport default HiddenText;\n","import Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport CardHeader from \"@material-ui/core/CardHeader\";\nimport { createStyles, makeStyles, Theme } from \"@material-ui/core/styles\";\nimport Typography from \"@material-ui/core/Typography\";\nimport React from \"react\";\nimport { useDrag } from \"react-dnd\";\n\nimport { NewWords_allNewWords_edges } from \"../../../graphql/__generated__/NewWords\";\nimport { DND_WORD_CARD } from \"../../../utils/const\";\nimport HiddenText from \"./HiddenText\";\n\ninterface IWordCardProps {\n  data: NewWords_allNewWords_edges;\n  onSlideLeft?: (v: IWordCardProps[\"data\"]) => void;\n  onSlideRight?: (v: IWordCardProps[\"data\"]) => void;\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    card: {\n      margin: \"auto\",\n      overflow: \"auto\",\n      height: \"40vh\",\n      width: \"75vw\"\n    }\n  })\n);\n\nconst WordCard: React.FC<IWordCardProps> = props => {\n  const { node } = props.data;\n  const classes = useStyles();\n  const [{ offset }, drag] = useDrag({\n    item: { type: DND_WORD_CARD.CARD, id: node.id },\n    collect: monitor => {\n      const initialOffset = monitor.getInitialClientOffset();\n      const currentOffset = monitor.getClientOffset();\n      const dragItem = monitor.getItem();\n      const isDragCurrentItem = dragItem && dragItem.id === node.id;\n      return {\n        isDragging: !!monitor.isDragging(),\n        offset: {\n          x:\n            isDragCurrentItem && currentOffset && initialOffset\n              ? currentOffset?.x - initialOffset?.x\n              : 0,\n          y:\n            isDragCurrentItem && currentOffset && initialOffset\n              ? currentOffset?.y - initialOffset?.y\n              : 0\n        }\n      };\n    },\n    end(item, monitor) {\n      const initialOffset = monitor.getInitialClientOffset();\n      const currentOffset = monitor.getClientOffset();\n      const dragItem = monitor.getItem();\n      const isDragCurrentItem = dragItem && dragItem.id === node.id;\n      const offsetX =\n        currentOffset && initialOffset\n          ? currentOffset?.x - initialOffset?.x\n          : 0;\n      if (isDragCurrentItem && offsetX > 100) {\n        props.onSlideRight && props.onSlideRight(props.data);\n      }\n      if (isDragCurrentItem && offsetX < -100) {\n        props.onSlideLeft && props.onSlideLeft(props.data);\n      }\n    }\n  });\n  return (\n    <div\n      ref={drag}\n      style={{ transform: `translate(${offset.x}px, ${offset.y}px)` }}\n    >\n      <Card className={classes.card}>\n        <CardHeader title={node.word} />\n        <CardContent>\n          <Typography variant=\"body2\">{node.example}</Typography>\n        </CardContent>\n        <CardContent>\n          <HiddenText>{node.translation}</HiddenText>\n        </CardContent>\n      </Card>\n    </div>\n  );\n};\n\nexport default WordCard;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nimport { NewWords_allNewWords_edges } from \"../../../graphql/__generated__/NewWords\";\nimport WordCard from \"./WordCard\";\n\nconst CardWrapper = styled.div<{ index: number }>`\n  position: absolute;\n  width: 100%;\n  top: 0;\n  left: 0;\n  transform: ${props =>\n    \"perspective(500px) translate3d(0,\" +\n    10 * Math.min(props.index, 2) +\n    \"px,\" +\n    -20 * Math.min(props.index, 2) +\n    \"px)\"};\n`;\n\nconst Container = styled.div`\n  position: relative;\n  margin: 20px auto 30px;\n  height: 40vh;\n  width: 75vw;\n`;\n\ninterface IWordCardListProps {\n  list: NewWords_allNewWords_edges[];\n  onSlideLeft?: (v: NewWords_allNewWords_edges) => void;\n  onSlideRight?: (v: NewWords_allNewWords_edges) => void;\n}\n\nconst WordCardList: React.FC<IWordCardListProps> = props => {\n  return (\n    <Container>\n      {props.list\n        .map((v, index) => (\n          <CardWrapper key={v.node.id} index={index}>\n            <WordCard\n              data={v}\n              onSlideLeft={props.onSlideLeft}\n              onSlideRight={props.onSlideRight}\n            />\n          </CardWrapper>\n        ))\n        .reverse()}\n    </Container>\n  );\n};\n\nexport default WordCardList;\n","import { useMutation, useQuery } from \"@apollo/client\";\nimport Button from \"@material-ui/core/Button\";\nimport Fab from \"@material-ui/core/Fab\";\nimport Paper from \"@material-ui/core/Paper\";\nimport { createStyles, makeStyles, Theme } from \"@material-ui/core/styles\";\nimport Typography from \"@material-ui/core/Typography\";\nimport CheckIcon from \"@material-ui/icons/Check\";\nimport ClearIcon from \"@material-ui/icons/Clear\";\nimport React from \"react\";\n\nimport {\n  NewWords,\n  NewWords_allNewWords_edges,\n  NewWordsVariables,\n} from \"../../../graphql/__generated__/NewWords\";\nimport {\n  UpdateNewWord,\n  UpdateNewWordVariables,\n} from \"../../../graphql/__generated__/UpdateNewWord\";\nimport { UPDATE_NEW_WORD } from \"../../../graphql/mutations\";\nimport { NEW_WORDS } from \"../../../graphql/queries\";\nimport WordCardList from \"./WordCardList\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      display: \"flex\",\n      flexDirection: \"column\",\n      alignContent: \"center\",\n      justifyContent: \"center\",\n      flex: 1,\n    },\n    content: {\n      display: \"flex\",\n      flexDirection: \"column\",\n    },\n    noWords: {\n      margin: \"auto\",\n      padding: theme.spacing(2),\n      textAlign: \"center\",\n    },\n    action: {\n      display: \"flex\",\n      justifyContent: \"space-evenly\",\n      alignContent: \"center\",\n    },\n  })\n);\n\nconst Memorize = () => {\n  const classes = useStyles();\n\n  const [listCursor, setListCursor] = React.useState(0);\n\n  const {\n    data: newWordsData,\n    loading: newWordsLoading,\n    fetchMore: newWordsFetchMore,\n    refetch: newWordsRefetch,\n  } = useQuery<NewWords, NewWordsVariables>(NEW_WORDS, {\n    variables: {\n      first: 4,\n    },\n  });\n\n  const [updateNewWord] = useMutation<UpdateNewWord, UpdateNewWordVariables>(\n    UPDATE_NEW_WORD\n  );\n\n  const fetchMoreNewWords = (params: NewWordsVariables) => {\n    newWordsFetchMore({\n      variables: params,\n      updateQuery: (previousResult, { fetchMoreResult }) => {\n        if (!fetchMoreResult || !fetchMoreResult.allNewWords)\n          return previousResult;\n        const newEdges = fetchMoreResult.allNewWords.edges;\n        const pageInfo = fetchMoreResult.allNewWords.pageInfo;\n        const totalCount = fetchMoreResult.allNewWords.totalCount;\n        const newWords: NewWords = {\n          allNewWords: {\n            __typename: previousResult.allNewWords!.__typename,\n            edges: [...previousResult.allNewWords!.edges, ...newEdges],\n            pageInfo,\n            totalCount,\n          },\n        };\n        return newEdges && newEdges.length ? newWords : previousResult;\n      },\n    });\n  };\n\n  const handleWord = async (\n    type: \"forgotten\" | \"remember\",\n    newWord?: NewWords_allNewWords_edges\n  ) => {\n    const v = newWord\n      ? newWord\n      : newWordsData?.allNewWords?.edges?.[listCursor];\n    if (!v) return;\n    const result = await updateNewWord({\n      variables: {\n        input: {\n          id: v.node.id,\n          forgottenTimes:\n            type === \"forgotten\"\n              ? v.node.forgottenTimes + 1\n              : v.node.forgottenTimes,\n          rememberTimes:\n            type === \"remember\"\n              ? v.node.rememberTimes + 1\n              : v.node.rememberTimes,\n        },\n      },\n    });\n\n    if (result.data?.updateUserWord?.success) {\n      setListCursor((v) => v + 1);\n      const pageInfo = newWordsData?.allNewWords?.pageInfo;\n      if (pageInfo?.hasNextPage) {\n        fetchMoreNewWords({\n          first: 1,\n          after: pageInfo.endCursor,\n        });\n      }\n    }\n  };\n\n  const handleRefetch = async () => {\n    await newWordsRefetch({\n      first: 4,\n      after: undefined,\n    });\n    setListCursor(0);\n  };\n\n  const renderContent = () => {\n    if (!newWordsData?.allNewWords?.edges?.length && newWordsLoading) {\n      return (\n        <Paper elevation={0} className={classes.noWords}>\n          <Typography variant=\"body2\">Loading...</Typography>\n        </Paper>\n      );\n    }\n    if (newWordsData?.allNewWords?.totalCount === 0) {\n      return (\n        <Paper elevation={0} className={classes.noWords}>\n          <Typography variant=\"body2\">没有新的单词了~</Typography>\n        </Paper>\n      );\n    }\n    if (\n      newWordsData?.allNewWords?.edges?.length &&\n      newWordsData?.allNewWords?.edges.length > listCursor\n    ) {\n      return (\n        <>\n          <WordCardList\n            list={newWordsData?.allNewWords?.edges.slice(\n              listCursor,\n              listCursor + 4\n            )}\n            onSlideLeft={(word) => handleWord(\"forgotten\", word)}\n            onSlideRight={(word) => handleWord(\"remember\", word)}\n          />\n          <div className={classes.action}>\n            <Fab\n              color=\"secondary\"\n              aria-label=\"forgotten\"\n              onClick={() => handleWord(\"forgotten\")}\n            >\n              <ClearIcon />\n            </Fab>\n            <Fab\n              color=\"primary\"\n              aria-label=\"remember\"\n              onClick={() => handleWord(\"remember\")}\n            >\n              <CheckIcon />\n            </Fab>\n          </div>\n        </>\n      );\n    } else {\n      return (\n        <Paper elevation={0} className={classes.noWords}>\n          <Typography variant=\"body2\">恭喜完成所有单词</Typography>\n          <Button variant=\"outlined\" color=\"secondary\" onClick={handleRefetch}>\n            再来一遍\n          </Button>\n        </Paper>\n      );\n    }\n  };\n  return (\n    <div className={classes.root}>\n      <div className={classes.content}>{renderContent()}</div>\n    </div>\n  );\n};\n\nexport default Memorize;\n","import { useMutation } from \"@apollo/client\";\nimport { ErrorMessage } from \"@hookform/error-message\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Backdrop from \"@material-ui/core/Backdrop\";\nimport Button from \"@material-ui/core/Button\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport Dialog, { DialogProps } from \"@material-ui/core/Dialog\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport { createStyles, makeStyles, Theme } from \"@material-ui/core/styles\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Typography from \"@material-ui/core/Typography\";\nimport CloseIcon from \"@material-ui/icons/Close\";\nimport React from \"react\";\nimport { Controller, useForm } from \"react-hook-form\";\n\nimport { AddUserWordInput } from \"../../../../__generated__/globalTypes\";\nimport {\n  AddNewWord,\n  AddNewWordVariables,\n} from \"../../../graphql/__generated__/AddNewWord\";\nimport { ADD_NEW_WORD } from \"../../../graphql/mutations\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      display: \"flex\",\n      flexDirection: \"column\",\n      width: \"100%\",\n      height: \"100%\",\n    },\n    appBar: {\n      position: \"relative\",\n    },\n    title: {\n      marginLeft: theme.spacing(2),\n      flex: 1,\n    },\n    content: {\n      \"& > *\": {\n        marginTop: theme.spacing(2),\n      },\n      flex: 1,\n      margin: theme.spacing(2),\n      overflow: \"auto\",\n    },\n    backdrop: {\n      zIndex: theme.zIndex.drawer + 1,\n      color: \"#fff\",\n    },\n  })\n);\n\ninterface IWordInputDialogProps extends DialogProps {\n  onManualClose: () => void;\n}\n\nconst WordInputDialog: React.FC<IWordInputDialogProps> = (props) => {\n  const { onManualClose, ...restProps } = props;\n\n  const classes = useStyles();\n  const { control, handleSubmit, errors } = useForm<AddUserWordInput>({\n    mode: \"onChange\",\n  });\n  const [addNewWord] = useMutation<AddNewWord, AddNewWordVariables>(\n    ADD_NEW_WORD\n  );\n  const [loading, setLoading] = React.useState(false);\n\n  const handleClose = () => {\n    onManualClose();\n  };\n\n  const handleSave = async (data: AddUserWordInput) => {\n    setLoading(true);\n    const res = await addNewWord({\n      variables: {\n        input: data,\n      },\n    });\n    setLoading(false);\n    if (res.data?.addUserWord?.id) {\n      onManualClose();\n    }\n  };\n\n  console.log(\"errors:\", errors);\n\n  return (\n    <Dialog {...restProps}>\n      <form\n        className={classes.root}\n        onSubmit={handleSubmit(handleSave)}\n        noValidate\n        autoComplete=\"off\"\n      >\n        <AppBar className={classes.appBar}>\n          <Toolbar>\n            <IconButton\n              edge=\"start\"\n              color=\"inherit\"\n              aria-label=\"close\"\n              onClick={handleClose}\n            >\n              <CloseIcon />\n            </IconButton>\n            <Typography variant=\"h6\" className={classes.title}>\n              添加生词\n            </Typography>\n            <Button disabled={loading} autoFocus color=\"inherit\" type=\"submit\">\n              保存\n            </Button>\n          </Toolbar>\n        </AppBar>\n        <div className={classes.content}>\n          <Controller\n            control={control}\n            as={\n              <TextField\n                error={!!errors.word}\n                fullWidth\n                label=\"生词\"\n                placeholder=\"请输入生词\"\n                variant=\"outlined\"\n                helperText={<ErrorMessage errors={errors} name=\"word\" />}\n              />\n            }\n            name=\"word\"\n            rules={{\n              required: {\n                value: true,\n                message: \"必填\",\n              },\n              maxLength: {\n                value: 32,\n                message: \"单词过长\",\n              },\n            }}\n            defaultValue=\"\"\n          />\n          <Controller\n            control={control}\n            as={\n              <TextField\n                fullWidth\n                label=\"翻译\"\n                placeholder=\"请输入翻译（可不填）\"\n                variant=\"outlined\"\n                helperText={<ErrorMessage errors={errors} name=\"translation\" />}\n              />\n            }\n            name=\"translation\"\n            rules={{\n              maxLength: {\n                value: 512,\n                message: \"翻译过长\",\n              },\n            }}\n            multiline\n            rows=\"4\"\n            defaultValue=\"\"\n          />\n          <Controller\n            control={control}\n            as={\n              <TextField\n                fullWidth\n                label=\"例句\"\n                placeholder=\"请输入例句（可不填）\"\n                variant=\"outlined\"\n                helperText={<ErrorMessage errors={errors} name=\"example\" />}\n              />\n            }\n            name=\"example\"\n            rules={{\n              maxLength: {\n                value: 512,\n                message: \"例句过长\",\n              },\n            }}\n            multiline\n            rows=\"4\"\n            defaultValue=\"\"\n          />\n        </div>\n      </form>\n      <Backdrop className={classes.backdrop} open={loading}>\n        <CircularProgress color=\"inherit\" />\n      </Backdrop>\n    </Dialog>\n  );\n};\n\nexport default WordInputDialog;\n","import { useQuery } from \"@apollo/client\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport ExpansionPanel from \"@material-ui/core/ExpansionPanel\";\nimport ExpansionPanelDetails from \"@material-ui/core/ExpansionPanelDetails\";\nimport ExpansionPanelSummary from \"@material-ui/core/ExpansionPanelSummary\";\nimport Fab from \"@material-ui/core/Fab\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport Slide from \"@material-ui/core/Slide\";\nimport { createStyles, makeStyles, Theme } from \"@material-ui/core/styles\";\nimport { TransitionProps } from \"@material-ui/core/transitions\";\nimport Typography from \"@material-ui/core/Typography\";\nimport AddIcon from \"@material-ui/icons/Add\";\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\nimport React from \"react\";\n\nimport {\n  UserWords,\n  UserWordsVariables,\n} from \"../../../graphql/__generated__/UserWords\";\nimport { USER_WORDS } from \"../../../graphql/queries\";\nimport WordInputDialog from \"./WordInputDialog\";\n\nconst Transition = React.forwardRef(function Transition(\n  props: TransitionProps & { children?: React.ReactElement<any, any> },\n  ref: React.Ref<unknown>\n) {\n  return <Slide direction=\"up\" ref={ref} {...props} />;\n});\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      width: \"100%\",\n      backgroundColor: theme.palette.background.paper,\n      paddingBottom: theme.spacing(8),\n      overflow: \"auto\",\n    },\n    actions: {\n      position: \"fixed\",\n      bottom: theme.spacing(10),\n      right: theme.spacing(3),\n    },\n  })\n);\n\nconst MyWords = () => {\n  const classes = useStyles();\n\n  const [inputOpen, setInputOpen] = React.useState(false);\n\n  const { data } = useQuery<UserWords, UserWordsVariables>(USER_WORDS, {\n    variables: {\n      first: 20,\n    },\n  });\n\n  const handleClickAdd = () => {\n    setInputOpen(true);\n  };\n\n  const handleCloseInputDialog = () => {\n    setInputOpen(false);\n  };\n\n  return (\n    <>\n      <List className={classes.root}>\n        {data?.allUserWords?.edges?.map((v) => (\n          <ExpansionPanel key={v.node.id}>\n            <ExpansionPanelSummary\n              expandIcon={<ExpandMoreIcon />}\n              aria-controls=\"panel1a-content\"\n              id=\"panel1a-header\"\n            >\n              <ListItem>\n                <ListItemIcon>\n                  <Checkbox\n                    edge=\"start\"\n                    // checked={checked.indexOf(value) !== -1}\n                    tabIndex={-1}\n                    disableRipple\n                    onClick={(e) => e.stopPropagation()}\n                    // inputProps={{ \"aria-labelledby\": labelId }}\n                  />\n                </ListItemIcon>\n                <ListItemText>\n                  <Typography>{v.node.word}</Typography>\n                </ListItemText>\n              </ListItem>\n            </ExpansionPanelSummary>\n            <ExpansionPanelDetails>\n              <Typography>{v.node.example}</Typography>\n              <Typography>{v.node.translation}</Typography>\n            </ExpansionPanelDetails>\n          </ExpansionPanel>\n        ))}\n      </List>\n      <Fab\n        className={classes.actions}\n        color=\"primary\"\n        aria-label=\"remember\"\n        onClick={handleClickAdd}\n      >\n        <AddIcon />\n      </Fab>\n      <WordInputDialog\n        open={inputOpen}\n        fullScreen\n        onClose={handleCloseInputDialog}\n        onManualClose={handleCloseInputDialog}\n        TransitionComponent={Transition}\n      />\n    </>\n  );\n};\n\nexport default MyWords;\n","import React from \"react\";\nimport {\n  BrowserRouter as Router,\n  Route,\n  Switch,\n  Redirect,\n} from \"react-router-dom\";\nimport styled from \"styled-components\";\nimport PrivateRoute from \"./components/PrivateRoute\";\n\nimport { Header, TabBar } from \"./components/shell\";\nimport Login from \"./pages/user/Login\";\nimport SignUp from \"./pages/user/SignUp\";\nimport Memorize from \"./pages/words/Memorize/Memorize\";\nimport MyWords from \"./pages/words/MyWords/MyWords\";\n\nconst FlexContent = styled.div`\n  display: flex;\n  flex: 1;\n  overflow: auto;\n`;\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  position: relative;\n  width: 100%;\n  height: 100%;\n`;\n\nconst Routes = () => {\n  return (\n    <Router>\n      <Switch>\n        <Route path=\"/user/login\" exact component={Login} />\n        <Route path=\"/user/signup\" component={SignUp} />\n        <PrivateRoute path=\"/\">\n          <Container>\n            <Header />\n            <Route path=\"/words\">\n              <FlexContent>\n                <Switch>\n                  <Route path=\"/words/memorize\" component={Memorize}></Route>\n                  <Route path=\"/words/my-words\" component={MyWords}></Route>\n                  <Route path=\"/words/statistics\">statistics</Route>\n                  <Redirect to=\"/words/memorize\" />\n                </Switch>\n              </FlexContent>\n              <TabBar />\n            </Route>\n          </Container>\n        </PrivateRoute>\n      </Switch>\n    </Router>\n  );\n};\n\nexport default Routes;\n","import { createMuiTheme, ThemeOptions } from \"@material-ui/core/styles\";\n\nconst baseThemOption: ThemeOptions = {\n  palette: {\n    secondary: {\n      main: \"#127bc4\",\n      light: \"rgb(65, 149, 207)\",\n      dark: \"rgb(12, 86, 137)\",\n      contrastText: \"#fff\",\n    },\n    type: \"dark\",\n    background: {\n      default: \"#121212\",\n    },\n    primary: {\n      main: \"#d63947\",\n      light: \"rgb(222, 96, 107)\",\n      dark: \"rgb(149, 39, 49)\",\n      contrastText: \"#fff\",\n    },\n  },\n};\n\nexport const materialDarkTheme = createMuiTheme(baseThemOption);\n","import { createMuiTheme, ThemeOptions } from \"@material-ui/core/styles\";\n\nconst baseThemOption: ThemeOptions = {\n  palette: {\n    secondary: {\n      main: \"#127bc4\",\n      light: \"rgb(65, 149, 207)\",\n      dark: \"rgb(12, 86, 137)\",\n      contrastText: \"#fff\",\n    },\n    type: \"light\",\n    background: {\n      default: \"#fff\",\n    },\n    primary: {\n      main: \"#d63947\",\n      light: \"rgb(222, 96, 107)\",\n      dark: \"rgb(149, 39, 49)\",\n      contrastText: \"#fff\",\n    },\n  },\n};\n\nexport const materialLightTheme = createMuiTheme(baseThemOption);\n","import \"./App.css\";\n\nimport { ApolloProvider } from \"@apollo/client\";\nimport { CssBaseline, ThemeProvider } from \"@material-ui/core\";\nimport { SnackbarProvider } from \"notistack\";\nimport React from \"react\";\nimport { DndProvider } from \"react-dnd\";\nimport { TouchBackend as Backend } from \"react-dnd-touch-backend\";\n\nimport { authorizedClient } from \"./common/graphql\";\nimport GqlNotice from \"./components/GqlNotice\";\nimport { useThemeMode } from \"./hooks/useThemeMode\";\nimport Routes from \"./Routes\";\nimport { materialDarkTheme } from \"./theme/dark\";\nimport { materialLightTheme } from \"./theme/light\";\n\n// import IndexPage from \"./pages\";\nfunction App() {\n  const themeMode = useThemeMode();\n  console.log(\"thememod\", themeMode);\n  return (\n    <>\n      <ApolloProvider client={authorizedClient}>\n        <DndProvider\n          backend={Backend}\n          // options={{ enableHoverOutsideTarget: true }}\n        >\n          <ThemeProvider\n            theme={\n              themeMode === \"dark\" ? materialDarkTheme : materialLightTheme\n            }\n          >\n            <SnackbarProvider>\n              <CssBaseline />\n              <Routes />\n              <GqlNotice />\n            </SnackbarProvider>\n          </ThemeProvider>\n        </DndProvider>\n      </ApolloProvider>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}